apply plugin: 'com.android.library'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.google.code.gson:gson:2.3'
    compile 'com.koushikdutta.ion:ion:1.3.8'
    compile 'com.android.support:support-v4:22.2.0'

    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test:testing-support-lib:0.1'
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
//        applicationId "com.quantimodo.android.sdk"
        minSdkVersion 14
        targetSdkVersion 22
        versionCode 230
        versionName "2.3.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }


    buildTypes {
        def STRING = "String"
        def APP_BASE_PATH_NAME = "APP_BASE_PATH"
        def quantimodoSDKFile = file('quantimodoSDK.properties')
        def BASE_PATH

        if (quantimodoSDKFile.exists()) {
            def Properties props = new Properties()
            props.load(new FileInputStream(quantimodoSDKFile))
            BASE_PATH = '"'+props['quantimodoApiUrl']+'"'
        } else {
            System.getenv("quantimodoApiUrl") == null ? 'null' : System.getenv("quantimodoApiUrl")
            BASE_PATH = System.getenv("quantimodoApiUrl") == null ? 'null' : '"'+System.getenv("quantimodoApiUrl")+'"';
        }

        debug {
            buildConfigField STRING, APP_BASE_PATH_NAME, BASE_PATH
        }
        release {
//            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField STRING, APP_BASE_PATH_NAME, BASE_PATH
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/maven/commons-io/commons-io/pom.xml'
        exclude 'META-INF/maven/commons-io/commons-io/pom.properties'
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

android.libraryVariants.all { variant ->
    task("${variant.name}Javadoc", type: Javadoc, dependsOn: "assembleDebug") {
        source = variant.javaCompile.source

        title = "Quantimodo SDK"

        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.linksOffline("http://d.android.com/reference","${android.sdkDirectory}/docs/reference");

        // First add all of your dependencies to the classpath, then add the android jars
        classpath += files(variant.javaCompile.classpath.files)
        classpath += files(android.getBootClasspath())

        // We're excluding these generated files
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

apply from: '../maven.gradle'
